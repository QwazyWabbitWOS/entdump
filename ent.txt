// From http://www.r1ch.net/stuff/r1q2/ - thanks R1ch.
//GPL etc.
//
// entdump is used for extracting entities from quake2 bsp files in text
// format for usage with the added ent file support in Xatrix+
//
// Build like: gcc -o entdump entdump.c
// Use like:  # ./entdump map.bsp > map.ent
// Nick I fixed so that the ent.file didn't have a double newline at the end.

// January 11, 2010, QwazyWabbit added texture file name output, usage info

#ifdef _WIN32
#pragma warning(disable : 4996)
#include <Windows.h>
#include <io.h>
#endif

#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>

#define	LUMP_ENTITIES		0
#define	LUMP_PLANES			1
#define	LUMP_VERTEXES		2
#define	LUMP_VISIBILITY		3
#define	LUMP_NODES			4
#define	LUMP_TEXINFO		5
#define	LUMP_FACES			6
#define	LUMP_LIGHTING		7
#define	LUMP_LEAFS			8
#define	LUMP_LEAFFACES		9
#define	LUMP_LEAFBRUSHES	10
#define	LUMP_EDGES			11
#define	LUMP_SURFEDGES		12
#define	LUMP_MODELS			13
#define	LUMP_BRUSHES		14
#define	LUMP_BRUSHSIDES		15
#define	LUMP_POP			16
#define	LUMP_AREAS			17
#define	LUMP_AREAPORTALS	18
#define	HEADER_LUMPS		19

#define IDBSPHEADER	(('P'<<24)+('S'<<16)+('B'<<8)+'I')
// little-endian "IBSP"

#define BSPVERSION	38

// upper design bounds
// leaffaces, leafbrushes, planes, and verts are still bounded by
// 16 bit short limits
#define	MAX_MAP_MODELS		1024
#define	MAX_MAP_BRUSHES		8192
#define	MAX_MAP_ENTITIES	2048
#define	MAX_MAP_ENTSTRING	0x40000
#define	MAX_MAP_TEXINFO		8192

#define	MAX_MAP_AREAS		256
#define	MAX_MAP_AREAPORTALS	1024
#define	MAX_MAP_PLANES		65536
#define	MAX_MAP_NODES		65536
#define	MAX_MAP_BRUSHSIDES	65536
#define	MAX_MAP_LEAFS		65536
#define	MAX_MAP_VERTS		65536
#define	MAX_MAP_FACES		65536
#define	MAX_MAP_LEAFFACES	65536
#define	MAX_MAP_LEAFBRUSHES 65536
#define	MAX_MAP_PORTALS		65536
#define	MAX_MAP_EDGES		128000
#define	MAX_MAP_SURFEDGES	256000
#define	MAX_MAP_LIGHTING	0x200000
#define	MAX_MAP_VISIBILITY	0x100000

typedef struct lump_s
{
	int	fileofs;
	int	filelen;
} lump_t;

typedef struct dheader_s
{
	int			ident;
	int			version;	
	lump_t		lumps[HEADER_LUMPS];
} dheader_t;

typedef struct texinfo_s
{
	float		vecs[2][4];		// [s/t][xyz offset]
	int			flags;			// miptex flags + overrides
	int			value;			// light emission, etc
	char		texture[32];	// texture name (textures/*.wal)
	int			nexttexinfo;	// for animations, -1 = end of chain
} texinfo_t;

typedef struct csurface_s
{
	char		name[16];
	int			flags;
	int			value;
} csurface_t;

typedef struct mapsurface_s  // used internally due to name len probs //ZOID
{
	csurface_t	c;
	char		rname[32];
	int			dupe;	//QwazyWabbit// added
} mapsurface_t;

typedef unsigned char byte;

byte	*cmod_base;
int		numtexinfo;
char	map_entitystring[MAX_MAP_ENTSTRING];
mapsurface_t	map_surfaces[MAX_MAP_TEXINFO];

#define ERR_DROP 1

/* function prototypes */
int test_wal_exists( char *name);
void Com_Error (int code, char *fmt, ...);
void CMod_LoadEntityString (lump_t *l);
void CMod_LoadSurfaces (lump_t *l);
int FilterFile(FILE *in);

void Com_Error (int code, char *fmt, ...)
{
	va_list		argptr;
	static char		msg[1024];

	va_start (argptr,fmt);
	vsprintf (msg,fmt,argptr);
	va_end (argptr);

	if(code == ERR_DROP)
	{
		fprintf (stderr, "FATAL ERROR: %s\n", msg);
		exit (EXIT_FAILURE);
	}
}

void CMod_LoadEntityString (lump_t *l)
{
	if (l->filelen >= MAX_MAP_ENTSTRING)
		Com_Error (ERR_DROP, "Map entity lump is too large (%d > %d)", l->filelen, MAX_MAP_ENTSTRING);

	memcpy (map_entitystring, cmod_base + l->fileofs, l->filelen);

	// Nick - check if already a newline present
	if (strcmp(&map_entitystring[strlen(map_entitystring)-1], "\n") == 0)
		map_entitystring[strlen(map_entitystring)-1] = '\0';	// Nick - Clear it if there is

	printf ("%s\n", map_entitystring); // Newline here (so only one).
}

/*
=================
CMod_LoadSurfaces
=================
//QW// pulled this from quake2 engine source and modified
*/
void CMod_LoadSurfaces (lump_t *l)
{
	texinfo_t		*in;
	mapsurface_t	*out;
	mapsurface_t	*list;
	int	i, j;
	int	count;
	int	uniques;
	int exists;

	in = (texinfo_t *)(cmod_base + l->fileofs);

	if (l->filelen % sizeof(*in))
		Com_Error (ERR_DROP, "CMod_LoadSurfaces: funny lump size");

	count = l->filelen / sizeof(*in);

	if (count < 1)
		Com_Error (ERR_DROP, "CMod_LoadSurfaces: Map with no surfaces");

	if (count > MAX_MAP_TEXINFO)
		Com_Error (ERR_DROP, "CMod_LoadSurfaces: Map has too many surfaces");

	numtexinfo = count;
	out = map_surfaces;
	uniques = 0;

	for (i = 0; i < count; i++, in++, out++)
	{
		strncpy (out->c.name, in->texture, sizeof(out->c.name)-1);
		strncpy (out->rname, in->texture, sizeof(out->rname)-1);
		out->c.flags = in->flags;
		out->c.value = in->value;
		out->dupe = 0;
		list = map_surfaces;

		for (j = 0; j < count; j++, list++)	// identify each unique texture name
		{
			if (strcmp(list->rname,"") != 0 && list != out 
				&& strcmp(list->rname, out->rname) == 0)
			{
				out->dupe = 1;	//flag the duplicate
			}
		}

		if (out->dupe == 0) 
		{
			uniques++;
			exists = test_wal_exists(out->rname);
			if (exists)
			{
				printf ("textures/%s.wal file EXISTS\n", out->rname);
			}
			else
				printf ("textures/%s.wal file is MISSING\n", out->rname);
		}
	}
	printf("This map uses %i unique textures %i times\n", uniques, count);
}

int test_wal_exists( char *name)
{
	char fname[260];
	FILE *f;

	sprintf(fname, "/quake2/baseq2/textures/%s.wal", name);
	f = fopen(fname, "r");
	if (f)
	{
		fclose(f);
		return 1;
	}
	else
		return 0;
}

int HasWild(char *fname)
{
	char c;

	while (c = *fname++)
		if (c == '*' || c == '?')
			return 1;
	return 0;
}

int DrivePath (char* filepath)
{
	unsigned status;
	int num;
	long hFile;
	struct _finddata_t file;
	int nfiles = 0;
	FILE *infile;
	char inpath[_MAX_PATH];

	status = 0;
    if( (hFile = _findfirst( filepath, &file )) == -1L )
   	{
   	   printf( "No files named %s found.\n",filepath );
	   status = 1;	//error status
	}
	else 
	{
		nfiles++;
		while (_findnext (hFile, &file) == 0) 
		{
			nfiles++;
		}
		_findclose( hFile );
		hFile = _findfirst( filepath, &file );
		strcpy(inpath, file.name);
		printf("Opening %s\n", inpath);
		infile = fopen(inpath, "r");
		status = FilterFile(infile);
		fclose(infile);

		for (num = 1;num < nfiles;++num) 
		{
			_findnext (hFile, &file);
			strcpy(inpath, file.name);
			infile = fopen(inpath, "r");
			status = FilterFile(infile);
			fclose(infile);
		}
	}
	_findclose( hFile );
	return (status);
}


int FilterFile(FILE *in)
{
	byte	*buf = NULL;
	int		i;
	int		len;
	dheader_t	header;

	fseek (in, 0, SEEK_END);
	len = ftell (in);
	fseek (in, 0, SEEK_SET);
	
	buf = malloc(len);
	if(buf)
		fread (buf, len, 1, in);
	else
		Com_Error(ERR_DROP, "Memory allocation failed.");

	//map header structs onto the buffer
	header = *(dheader_t *)buf;
	for (i = 0 ; i < sizeof(dheader_t) / 4 ; i++)
		((int *)&header)[i] = ((int *)&header)[i];

	if (header.version != BSPVERSION)
		Com_Error (ERR_DROP, "This is not a valid BSP file.");

	cmod_base = buf;

	// load into heap
	printf("Map textures:\n");
	CMod_LoadSurfaces (&header.lumps[LUMP_TEXINFO]);
	printf("Map entities:\n");
 	CMod_LoadEntityString (&header.lumps[LUMP_ENTITIES]);
	if (buf)
		free (buf);
	return 1;
}

int main(int argc, char* argv[])
{
	FILE	*in = NULL;

	if (argc > 1)
	if (HasWild(argv[1]))
	{
		DrivePath(argv[1]);
		return EXIT_SUCCESS;
	}	
	else
	{
		in = fopen(argv[1], "rb");
		if (!in) 
			Com_Error(ERR_DROP, "Unable to open %s.", argv[1]);
	}
	else
	{
		//print usage info
		printf("Entdump v1.1 is used for extracting entities from quake2 bsp files in text\n");
		printf("format for usage with the added ent file support in Xatrix+ and other mods.\n");
		printf("Usage: entdump mapname.bsp \n");
		printf("   or: entdump mapname.bsp > mapname.txt \n");
		printf("   or: entdump mapname.bsp | more \n");
		return EXIT_FAILURE;
	}

	FilterFile(in);
	if (in) fclose (in);
	return EXIT_SUCCESS;
}
